from bot.translations import localize
from bot.page_commands import parse_title_and_execute, parse_title_and_execute_from_command
from notion.client import NotionClient
from telegram.message import Message
from bot_app.models import TelegramChat, TelegramUser
from django.core.management import BaseCommand
from django.conf import settings
from datetime import datetime, timezone, tzinfo
import time
from bot import constants
from bot import global_services
from bot.conversations import greetings,get_timezone
from bot.conversations import edit_notion_page
from bot import common
from telegram.ext.dispatcher import Dispatcher, run_async
from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from notion.block import Block, Children, TextBlock, BasicBlock, SubsubheaderBlock
from bot.handlers import input
from bot.decorators import get_or_create_user_and_chat, check_notion_link_in_chat, cooldown_check
import os
import telegram

@get_or_create_user_and_chat
def help_command(update: Update, context: CallbackContext, *args, **kwargs) -> None:

    help_text_1 = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        "–ë–∞–∑–æ–≤–∞—è –∏–¥–µ—è –±–æ—Ç–∞ –ø—Ä–æ—Å—Ç–∞. –í—Å—ë —á—Ç–æ –≤—ã –µ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Notion\n\n"
        "–ß—Ç–æ–±—ã —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.\n\n\n"
        "üî• <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞:</b>\n\n"
        "<b>upward</b> - –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Å–≤–µ—Ä—Ö—É. –£–¥–æ–±–Ω–æ –¥–ª—è \"–∏–Ω–±–æ–∫—Å–∞\", —á—Ç–æ–±—ã –Ω–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ —Å–∫—Ä–æ–ª–∏—Ç—å –≤–Ω–∏–∑ –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–ø–∏—Å—è–º.\n\n"
        "<b>diary</b> - —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–∑–¥–µ–ª—è—Ç—å—Å—è –¥–∞—Ç–∞–º–∏. –£–¥–æ–±–Ω–æ –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–æ–≤ –∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–ø–ª–æ—à–Ω—É—é —Å—Ç–µ–Ω—É —Ç–µ–∫—Å—Ç–∞.\n\n"
        "<b>at 17:00</b> - –±–æ—Ç –±—É–¥–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ß—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞ —ç—Ç–∏—Ö –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: \"at 19:00 135\"\n\n"

        "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∫–æ–Ω—Ü–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ—Å–ª–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —á–µ—Ä—Ç—ã. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏:"

    )
    update.message.reply_text(localize(help_text_1), parse_mode=ParseMode.HTML)

    
    file_path = os.path.join(settings.IMAGES_DIR, 'title_commands.jpg')
    image = open(file_path, 'rb')
    update.message.reply_photo(photo=image)    


    help_text_2 = (
        "‚ö†Ô∏è –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /refresh, —á—Ç–æ–±—ã –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ—á–∏—Ç–∞–ª–æ—Å—å.\n\n\n"
        "ü§ù <b>–°–æ–æ–±—â–µ—Å—Ç–≤–æ</b>\n"
        "–ï—Å–ª–∏ –¥–ª—è –≤–∞—Å —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–º, –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ –±–æ—Ç–∞ - –¥–æ–±–∞–≤–ª—è–π—Ç–µ—Å—å –≤ –Ω–∞—à–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏:\n"
        "https://t.me/notion_inbox_bot_chat\n"
    )
    update.message.reply_text(localize(help_text_2), parse_mode=ParseMode.HTML)


@get_or_create_user_and_chat
def community_command(update: Update, context: CallbackContext, *args, **kwargs) -> None:

    help_text_2 = (
        "ü§ù <b>–°–æ–æ–±—â–µ—Å—Ç–≤–æ</b>\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏:\n"
        "https://t.me/notion_inbox_bot_chat\n"
    )
    update.message.reply_text(localize(help_text_2), parse_mode=ParseMode.HTML)

@cooldown_check
@get_or_create_user_and_chat
@check_notion_link_in_chat
def refresh_page_command(update: Update, context: CallbackContext, *args, **kwargs) -> None:
    update.message.reply_text(localize("üëÄ –û–±–Ω–æ–≤–ª—è—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"))

    # –î–∞–≤–∞–π —Ç—É—Ç –±—Ä–∞—Ç—å –ø–æ —á–∞—Ç-–∞–π–¥–∏ –∏–∑ –±–∞–∑—ã —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ—É—à–µ–Ω –∏ –µ–≥–æ 
    telegram_chat:TelegramChat = kwargs.get(constants.P_TELEGRAM_CHAT_OBJ)

    notion_page_nullable:BasicBlock = global_services.get_notion_client().get_block(telegram_chat.notion_page_id, force_refresh=True)

    access_errors_list = common.check_notion_page_access(notion_page_nullable)

    if(len(access_errors_list) > 0):
        # –ù–µ –¥–µ–ª–∞—é –ø–∞—Ä—Å–∏–Ω–≥–∞. –í—Å—ë –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ —Ä–∞–Ω—å—à–µ.
        common.send_lost_access_message(telegram_chat)
    else:
        # –£—Ä–ª –∏ –ò–î –Ω–µ –º–µ–Ω—è—é—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –∫—Ä–æ–º–µ —Ç–∞–π—Ç–ª–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.
        telegram_chat.notion_page_title = '' if notion_page_nullable.title_plaintext is None else str(notion_page_nullable.title_plaintext)
        telegram_chat.save()
        parse_title_and_execute_from_command(telegram_chat, update=update, context=context)
        common.send_waiting_input_message(telegram_chat)



@get_or_create_user_and_chat
def unknown_command(update: Update, context: CallbackContext, *args, **kwargs):
    context.bot.send_message(chat_id=update.effective_chat.id, text=localize("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É."))

# def run_async_messages():
#     for i in range(0, 10):
#         time.sleep(1.2)
#         print('message after sleep')
#         bot = telegram.Bot(token=settings.TELEGRAM_BOT_TOKEN) if settings.TELEGRAM_BOT_TOKEN else None
#         bot.send_message(chat_id='447478326', text='–ò–≥–æ—Ä—å, –ø—Ä–∏–≤–µ—Ç! ' + str(i))
#         print('bot', bot)            

class Command(BaseCommand):
    help = "Telegram bot."


    def handle(self, *args, **options):
        """Start the bot."""

        global_services.start_client(notion_token=settings.NOTION_CLIENT_TOKEN)
        print('Notion client: ' + str(global_services.get_notion_client().current_user))

        updater = Updater(token=settings.TELEGRAM_BOT_TOKEN, use_context=True)
        print('Telegram client:' + str(updater.bot))

        updater.dispatcher.add_handler(greetings.conversation_handler)
        updater.dispatcher.add_handler(get_timezone.conversation_handler)
        updater.dispatcher.add_handler(CommandHandler("refresh", refresh_page_command))
        updater.dispatcher.add_handler(CommandHandler("help", help_command))
        updater.dispatcher.add_handler(CommandHandler("community", community_command))
        updater.dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, input.input_command))
        updater.dispatcher.add_handler(MessageHandler(Filters.command, unknown_command))

# –í–æ—Ç —Ç—É—Ç –¥–∂–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—ã –≤—Å–µ. –î–∞–≤–∞–π –¥–∂–æ–± –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –∑–∞–ø—É—Å—Ç–∏–º.
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤.
# –û–±–æ–π—Ç–∏ —Ü–∏–∫–ª–æ–º —á–∞—Ç—ã.




        chats_for_parsing_title_set = TelegramChat.objects.exclude(notion_page_title='')
        print('–û–±—å–µ–∫—Ç–æ–≤ —Å –Ω–µ –Ω—É–ª–ª —Ç–∞–π—Ç–ª–æ–º ' + str(len(chats_for_parsing_title_set)))
        for telegram_chat in chats_for_parsing_title_set.iterator():
            parse_title_and_execute(telegram_chat)


        if not settings.IS_WEBHOOK:
            updater.start_polling()
            # ^ polling is useful for development since you don't need to expose endpoints
        else:
            print
            # print(updater.bot.get_webhook_info())
            # updater.start_webhook(
            #     listen=settings.TELEGRAM_BOT_WEBHOOK_HOST,
            #     port=settings.TELEGRAM_BOT_WEBHOOK_PORT,
            #     url_path=settings.TELEGRAM_BOT_TOKEN,
            #     key='certs/private.key',
            #     cert='certs/cert.pem'
            # )
            # updater.bot.set_webhook(url=settings.TELEGRAM_BOT_WEBHOOK_URL + settings.TELEGRAM_BOT_TOKEN)


        # Dispatcher.get_instance().run_async(run_async_messages)

        updater.idle()

        print('After idle')





